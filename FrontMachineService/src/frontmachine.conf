include "common"

akka {
  remote.netty.tcp.port = 2552
}	
send-dispatcher {
	# Dispatcher is the name of the event-based dispatcher
	type = Dispatcher
	# What kind of ExecutionService to use
	executor = "thread-pool-executor"
	# Configuration for the thread pool
	thread-pool-executor {
	# minimum number of threads to cap factor-based core number to
	max-pool-size-min = 50
	# No of core threads ... ceil(available processors * factor)
	max-pool-size-factor = 8.0
	# maximum number of threads to cap factor-based number to
	max-pool-size-max = 100
	
	core-pool-size-min = 20
	# No of core threads ... ceil(available processors * factor)
	core-pool-size-factor = 4.0
	# maximum number of threads to cap factor-based number to
	core-pool-size-max = 50
	}
	# Throughput defines the maximum number of messages to be
	# processed per actor before the thread jumps to the next actor.
	# Set to 1 for as fair as possible.
	throughput = 100
	}
dummyTrm-dispatcher {
	# Dispatcher is the name of the event-based dispatcher
	type = Dispatcher
	# What kind of ExecutionService to use
	executor = "thread-pool-executor"
	# Configuration for the thread pool
	thread-pool-executor {
	# minimum number of threads to cap factor-based core number to
	max-pool-size-min = 20
	# No of core threads ... ceil(available processors * factor)
	max-pool-size-factor = 8.0
	# maximum number of threads to cap factor-based number to
	max-pool-size-max = 50
	
	core-pool-size-min = 10
	# No of core threads ... ceil(available processors * factor)
	core-pool-size-factor = 4.0
	# maximum number of threads to cap factor-based number to
	core-pool-size-max = 20
	}
	# Throughput defines the maximum number of messages to be
	# processed per actor before the thread jumps to the next actor.
	# Set to 1 for as fair as possible.
	throughput = 100
	}
receive-dispatcher {
	# Dispatcher is the name of the event-based dispatcher
	type = Dispatcher
	# What kind of ExecutionService to use
	executor = "thread-pool-executor"
	# Configuration for the thread pool
	thread-pool-executor {
	# minimum number of threads to cap factor-based core number to
	max-pool-size-min = 20
	# No of core threads ... ceil(available processors * factor)
	max-pool-size-factor = 8.0
	# maximum number of threads to cap factor-based number to
	max-pool-size-max = 50
	
	core-pool-size-min = 10
	# No of core threads ... ceil(available processors * factor)
	core-pool-size-factor = 4.0
	# maximum number of threads to cap factor-based number to
	core-pool-size-max = 20
	}
	# Throughput defines the maximum number of messages to be
	# processed per actor before the thread jumps to the next actor.
	# Set to 1 for as fair as possible.
	throughput = 100
	}

receiveCall-dispatcher {
	# Dispatcher is the name of the event-based dispatcher
	type = Dispatcher
	# What kind of ExecutionService to use
	executor = "thread-pool-executor"
	# Configuration for the thread pool
	thread-pool-executor {
	# minimum number of threads to cap factor-based core number to
	max-pool-size-min = 20
	# No of core threads ... ceil(available processors * factor)
	max-pool-size-factor = 8.0
	# maximum number of threads to cap factor-based number to
	max-pool-size-max = 50
	
	core-pool-size-min = 20
	# No of core threads ... ceil(available processors * factor)
	core-pool-size-factor = 4.0
	# maximum number of threads to cap factor-based number to
	core-pool-size-max = 50
	}
	# Throughput defines the maximum number of messages to be
	# processed per actor before the thread jumps to the next actor.
	# Set to 1 for as fair as possible.
	throughput = 100
	}